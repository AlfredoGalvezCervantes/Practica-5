# Importa la biblioteca para implementar conjuntos disjuntos (disjoint sets)
from collections import defaultdict

# Función para encontrar el representante (raíz) de un conjunto
def find(parent, node):
    if parent[node] == node:
        return node
    return find(parent, parent[node])

# Función para unir dos conjuntos en uno
def union(parent, rank, node1, node2):
    root1 = find(parent, node1)
    root2 = find(parent, node2)

    if rank[root1] < rank[root2]:
        parent[root1] = root2
    elif rank[root1] > rank[root2]:
        parent[root2] = root1
    else:
        parent[root2] = root1
        rank[root1] += 1

# Implementación del algoritmo de Kruskal
def kruskal(graph):
    edges = []
    for u, v, w in graph:
        edges.append((u, v, -w))  # Invertir el peso para el árbol de expansión máxima

    edges.sort(key=lambda x: x[2])
    n = len(edges)
    
    parent = {i: i for i in range(n)}
    rank = {i: 0 for i in range(n)}

    min_cost_tree = []
    max_cost_tree = []

    for u, v, w in edges:
        root1 = find(parent, u)
        root2 = find(parent, v)
        if root1 != root2:
            min_cost_tree.append((u, v, -w))
            max_cost_tree.append((u, v, w))  # Mantener el peso original
            union(parent, rank, root1, root2)

    return min_cost_tree, max_cost_tree

# Ejemplo de uso
graph = [(0, 1, 2), (0, 2, 4), (1, 2, 1), (1, 3, 3), (2, 3, 5)]
min_tree, max_tree = kruskal(graph)

print("Árbol de Expansión Mínima (Mínimo Costo):", min_tree)
print("Árbol de Expansión Mínima (Máximo Costo):", max_tree)
